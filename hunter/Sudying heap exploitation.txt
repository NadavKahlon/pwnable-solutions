INTERNAL_SIZE_T -> size_t
Alignment -> 2 * sizeof(size_t)
MORECORE -> sbrk


P -> PREV_INUSE (unused low-order bit of size - multiple of 4)

M -> IS_MMAPPED (unused 2nd low-order bit of size - multiple of 4)
	chunk obtained through mmap (not adjacent to a free chunk, neither in an arena)

A -> NON_MAIN_ARENA
	Each thread has it sown arena


Arena: one per thread; header: `struct malloc_state`
The main arena is a global variable
Arena headers for other threads on the heap segment itself
Non-main arenas can have multiple heaps (not heap segment)


Fast bins:
* singly linked list; LIFO
* prev_size of next chunk (linearly) will contain user data
* Never fused
* Same size per bin

Unsorted bin:
* Small and large chunk, when freed, end up here
* Speedup cache

Small bins:
* Doubly linked list; FIFO
* Chunks may be fused upon freeing, before ending up in the unsorted bin
* Same size per bin

Large bins:
* Different sizes per bin, decreasing order
* Largest and smallest bins sizes are determined per bin, with the gap increasing as we continue
* Chunks may be fused upon freeing, before ending up in the unsorted bin


In the following visualization, each "|...|" marks a bin. the numnber of spaces between the bars is the number of differently sized chunks in the bin. The size difference between successive ' ' is 8 bytes.
We begin with small chunks - one bin per size. Then continue with large chunks - 1 bin per multiple adjacent sizes, with the number of sizes increases as the sizes themself increase. Finally, "|->" marks a bin of unlimited number of sizes - the sizes that's left

| | | | | | | | | | | | | | | | |
|   |   |   |   |   |   |   |   |
|       |       |       |       |
|               |               |
|                               |
|->


Top chunk:
* Not in any bin
* Borders the top (end) of the arena
* Last resort
* Can grow using the `sbrk` syscall, if still mmore size is required
* PREV_INUSE always set (otherwise could be larger)

Last remainder chunk:
* When exact size is not available, a larger chunk is split. This is the remainder of the last split (while the other part was returned to the userr).


 (((req) + 4 + 7) & ~7
from pwn import *
from typing import Union

def _color(color_code: int) -> None:
    print(f"\033[{str(color_code)}m", end='')


def _print_packet(packet: bytes, sender: str) -> None:
    _color(33)
    print(f'{sender}')
    _color(0)
    print(packet.decode('ISO-8859-1'))
    print()


class RemoteProcess:
    """ Note: only run in powershell terminal """
    def __init__(self, host: str, port: int, user: str, password: str,
                 exe: str, verbose: bool =True, gdb: bool =False):
        self._host = host
        self._port = port
        self._user = user
        self._password = password
        self._exe = exe
        self._verbose = verbose
        self._gdb = gdb
    
        self._ssh_connection = None
        self._process = None
    
    
    def __enter__(self):
        self._ssh_connection = tubes.ssh.ssh(
            user=self._user, host=self._host, port=self._port, password=self._password)
        self._process = self._ssh_connection.process([self._exe])
        if self._gdb:
            gdb.attach(self._process, gdbscript='c\n')
    

    def __exit__(self, exception_type, exception_value, exception_traceback):
        self._process.close()
        self._process = None
        self._ssh_connection.close()
        self._ssh_connection == None


    def send(self, data: Union[bytes, str]) -> None:
        if isinstance(data, str):
            data = data.encode()
        self._process.send(data)
        if self._verbose:
            _print_packet(data, 'Client')


    def recv(self, timeout: int =None) -> bytes:
        data = self._process.recv(timeout=timeout)
        if self._verbose:
            _print_packet(data, 'Server')
        return data


    def interactive(self) -> None:
        self._process.interactive()


class NetcatClient:
    def __init__(self, host: str, port, verbose: bool =True):
        self._host = host
        self._port = port
        self._verbose = verbose
    
        self._conn = None

    
    def __enter__(self):
        self._conn = remote(self._host, self._port)


    def __exit__(self, exception_type, exception_value, exception_traceback):
        self._conn.close()
        self._conn = None


    def send(self, data: Union[bytes, str]) -> None:
        if isinstance(data, str):
            data = data.encode()
        self._conn.send(data)
        if self._verbose:
            _print_packet(data, 'Client')


    def recv(self, timeout: int =None) -> bytes:
        data = self._conn.recv(timeout=timeout)
        if self._verbose:
            _print_packet(data, 'Server')
        return data


    def interactive(self) -> None:
        self._conn.interactive()
